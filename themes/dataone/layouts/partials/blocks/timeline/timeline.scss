// ======
// 
$line-left-mobile: 1rem; // distance from left for the line & points on mobile
$circle-size: 13px; // size of circles on line  at each timeline event
$point-size: 15px; // size of points at each timeline event
$point-dist-top: 2.5rem; // point's vertical distance from top of event
$card-color: var(--section-c-background-lighter, white);

.timeline {

  // ==========================================================================
  //    Variables
  // ==========================================================================

  // Allow the block's base class to be used at all scopes within the block.
  // (bn = block name), use as: #{$bn}. 
  $bn         : &;
  // Use the block's base class as a variable prefix (remove class selector . )
  $prefix     : "--" + str-replace(#{$bn}, ".");

  // Variables specific to this block, based on varibles set at higher scope
  // (e.g. .section), such that blocks can be themed from a higher level.
  // The value may change in modified blocks or elements (i.e. block--modifier).
  // Always use css variables along with a default value to maintain the block's
  // independence & modularity (a la BEM).

  // #{$prefix}- : var( , );

  // ==========================================================================
  //    Styles
  // ==========================================================================

  @include f-common;
  position    : relative;
  margin-right: auto;
  margin-left : auto;
  // the line for the time line
  &::before {
    content   : '';
    background: var(--section-c-accent, dimgray);
    opacity   : .5;
    width     : 3px;
    height    : 95%;
    position  : absolute;
    left      : $line-left-mobile;
    transform : translateX(-50%);
    @include desktop {
      left: 50%;
    }
  }

  &__event {
    width        : 100%;
    margin-bottom: 2rem;
    // point
    .card::after {
      content     : '';
      display     : block;
      clear       : both;
      position    : absolute;
      border-style: solid;
      width       : 0;
      height      : 0;
      top         : calc((#{$point-dist-top} + (.5 * #{$circle-size})) - (.5 * #{$point-size}) - 4px);
      left        : -$point-size;
      border-width: ((2/3) * $point-size) $point-size ((2/3) * $point-size) 0;
      border-color: transparent $card-color transparent transparent;
    }

    &:nth-child(even) {
      .card {
        @include desktop {
          margin-left: 55%;
        }
      }

      .card__date {
        right: auto;
        left : 0;
      }
    }

    &:nth-child(odd) {
      .card::after {
        left: -$point-size;
        @include desktop {
          left        : auto;
          right       : -$point-size;
          border-width: ((2/3) * $point-size) 0 ((2/3) * $point-size) $point-size;
          border-color: transparent transparent transparent $card-color;
        }
      }
    }
  }

  &__circle {
    width        : $circle-size;
    height       : $circle-size;
    background   : var(--section-c-accent, dimgray);
    border-radius: 50%;
    position     : absolute;
    left         : $line-left-mobile;
    margin-top   : $point-dist-top;
    margin-left  : -.5 * $circle-size;
    @include desktop {
      left: 50%;
    }
  }

  .card {
    margin-left: 3.5rem;
    width      : auto;
    @include desktop {
      max-width  : auto;
      margin-left: 0;
      width      : 45%;
    }
  }
}
