// Functions
/// Slightly lighten a color
/// @access public
/// @param {Color} $color - color to tint
/// @param {Number} $percentage - percentage of `$color` in returned color
/// @return {Color}
// 
@function tint($color, $percentage) {
  @return mix(white, $color, $percentage);
}
/// Slightly darken a color
/// @access public
/// @param {Color} $color - color to shade
/// @param {Number} $percentage - percentage of `$color` in returned color
/// @return {Color}
// 
@function shade($color, $percentage) {
  // @return mix(black, $color, $percentage);
  @return mix(black, $color, (100-$percentage));
}
/// Return a standardized shade/tint of a given colour
/// @access public
/// @param {Color} $color - color to shade
/// @param {Number} $level - A number between 1 and 9 that represents the desired shade/tint, where 9 is the darkest and 1 is the lightest
/// @return {Color}
//
@function col($color, $level) {
  @if($level == 1) {
    $mod1: tint($color, 97);
    $mod2: saturate($mod1, 30);
    @return $mod2;
  }
  @if($level == 2) {
    $mod1: tint($color, 85);
    $mod2: saturate($mod1, 20);
    @return $mod2;
  }
  @if($level == 3) {
    $mod1: tint($color, 66);
    $mod2: saturate($mod1, 10);
    @return $mod2;
  }
  @if($level == 4) {
    $mod1: tint($color, 45);
    $mod2: saturate($mod1, 5);
    @return $mod2;
  }
  @if($level == 5) {
    @return $color;
  }
  @if($level == 6) {
    $mod1: shade($color, 82);
    $mod2: saturate($mod1, 21);
    @return $mod2;
  }
  @if($level == 7) {
    $mod1: shade($color, 65);
    $mod2: saturate($mod1, 25);
    @return $mod2;
  }
  @if($level == 8) {
    $mod1: shade($color, 48);
    $mod2: saturate($mod1, 30);
    @return $mod2;
  }
  @if($level == 9) {
    $mod1: shade($color, 25);
    $mod2: saturate($mod1, 35);
    @return $mod2;
  }
}

/// Replace `$search` with `$replace` in `$string`
/// @author Hugo Giraudel
/// @param {String} $string - Initial string
/// @param {String} $search - Substring to replace
/// @param {String} $replace ('') - New value
/// @return {String} - Updated string
@function str-replace($string, $search, $replace: '') {
  $index: str-index($string, $search);
  @if $index {
    @return str-slice($string, 1, $index - 1) + $replace + str-replace(str-slice($string, $index + str-length($search)), $search, $replace);
  }
  @return $string;
}

// Calculeate brightness of a given color.
// source: Brendan Saunders, https://codepen.io/bluesaunders/pen/FCLaz
@function color-brightness($color) {
  @return ((red($color) * .299) + (green($color) * .587) + (blue($color) * .114)) / 255 * 100%;
}

// checks if a colors' brightness is < 50%.
@function emphasize($color) {
  @if $color == null {
    @return null;
  } @else {
    $color-brightness: color-brightness($color);
    $emphasized-color: $color;
    @if $color-brightness < 50% {
      $emphasized-color: saturate(shade($color, 68),6%);
    } @else {
      $emphasized-color: saturate(tint($color, 7%),22%);
    }
    @return $emphasized-color;
  }
}

/// Simple power function. Only allows positive $exponent arguments.
@function pow($number, $exponent) {
  $value: 1;

  @if $exponent > 0 {
    @for $i from 1 through $exponent {
      $value: $value * $number;
    }
  }

  @return $value;
}

/// Get a standardized shadow color with alpha based on a given color. Use a darker
/// shade of the color as the base color, and calculate a opacity based on the
/// brightness of a given color, such that the opacity is higher for darker
/// colors and lower for lighter colors. Give a lighter or darker value given
/// a level between 1 and 4.
@function get-shadow($color, $level: 1) {

  @if $color == null {
    @return null;
  }

  // The brightness value of the given color, unitless number between 1 and 100
  $brightness        : color-brightness($color)/1%;
  // Get a darker and less saturated shade of the given color to use for the rgb
  // part of the shadow
  $shadow-color      : col($color, 8);
  $shadow-color      : desaturate($shadow-color, 30);
  // The minimum opacity allowable (use for the brightest colors)
  $min-opacity       : .09;
  // The maximum allowable opacity for the first level (will increase at level 2, 3, and 4)
  $max-level1-opacity: .4;
  // How much to increase the opacity at each level
  $level-increment   : .05;

  // Increase opacity for darker colors, such that the max opacity possible is
  // $max-level1-opacity for colors with brightness <= 28, and the min opacity
  // possible is $min-opacity for colors with brightness >= 98.
  // https://www.desmos.com/calculator/pk9xyhattv
  $base-opacity      : $min-opacity + (($max-level1-opacity - $min-opacity) / (1 + pow(($brightness/6),2.7)));

  // Calculate total opacity
  $opacity           : $base-opacity + (pow(($level - 1),2) * $level-increment);

  // Max value for opacity is 1
  @if $opacity > 1 {
    $opacity: 1;
  }

  @return rgba($shadow-color, $opacity);
}

/// Compares contrast of a given color to the light/dark arguments and returns whichever is most "contrasty".
/// This takes the red, green and blue (RGB) values of an element’s background color, multiplies them by some special numbers (299, 587, and 144, respectively), adds them together, then divides the total by 1,000. When that sum is greater than 128, it will return the darker colour; otherwise, we’ll get the lighter colour.
/// source: Brendan Saunders, https://codepen.io/bluesaunders/pen/FCLaz
@function color-contrast($color, $dark: #000, $light: #fff) {
  @if $color == null {
    @return null;
  } @else {
    $color-brightness     : color-brightness($color);
    $light-text-brightness: color-brightness($light);
    $dark-text-brightness : color-brightness($dark);

    @return if(abs($color-brightness - $light-text-brightness) > abs($color-brightness - $dark-text-brightness), $light, $dark);
  }
}
/// Map deep get
/// @author Hugo Giraudel
/// @access public
/// @param {Map} $map - Map
/// @param {Arglist} $keys - Key chain
/// @return {*} - Desired value
@function map-deep-get($map, $keys...) {
  @each $key in $keys {
    $map: map-get($map, $key);
  }
  @return $map;
}
