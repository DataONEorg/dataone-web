// For both SCSS asset files (in the assets/scss directory), and SCSS files for
// blocks (in the layouts/partials/blocks directory), use Hugo to import the
// file contents here instead of SCSS's @import function. This way we can
// execute all SCSS files as template, so that scss files can contain hugo
// templating code if needed. * SITE IS PASSED AS THE CONTEXT *

{{ $site := .Site }}

// ==== IMPORT ALL ASSET SCSS ====
// Use a slice of file names instead of ranging through the directory because
// the order in which we import them here matters. (Otherwise it's alphabetical)
{{ $scssFiles :=  slice "variables" "fonts" "functions" "mixins-and-placeholders" "responsive-font-size" "tooltip" "utility" "root" "body" }}
{{ $scssAssetDir := "scss/" }}
{{ $ext := ".scss" }}
{{ range $name := $scssFiles }}
  {{ $assetPath := path.Join $scssAssetDir (print $name $ext) }}
  {{ $asset := resources.Get $assetPath | resources.ExecuteAsTemplate (print $name ".scss") $.Site }}
  {{ $asset.Content | safeCSS }}
{{ end }}

// ==== IMPORT ALL BLOCK SCSS ====
// Import all .scss files contained one subdirectory below the "blocks" directory
{{ $blockDir :=  .Site.Params.blockDir }}
{{ range (readDir $blockDir) }}
  // Check that the name of the item in the blocks directory is another directory
  {{ $dirname := .Name }}
  {{ $blocksubdir := path.Join $blockDir $dirname }}
  {{ $stat := os.Stat $blocksubdir }}
  {{ if $stat.IsDir }}
    // Read through the subdirectories of the block directory
    {{ range (readDir $blocksubdir) }}
      // If the file is an .scss file, import it
      {{ if (strings.HasSuffix .Name "scss") }}
        {{ $blockscss := path.Join $blocksubdir .Name }}
        {{ $cssResource := readFile $blockscss | resources.FromString (print .Name ".scss") | resources.ExecuteAsTemplate (print .Name "2.scss") $site }}
        {{ $cssResource.Content | safeCSS }}
      {{ end }}
    {{ end }}
  {{ end }}
{{ end }}
